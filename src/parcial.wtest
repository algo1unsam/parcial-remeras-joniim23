import remeras.*
import empresa.*

describe "Tests del parcial" {
	const remeraAzul = new RLisa ( color = "azul", talle = 40 )
	const remeraNegra = new RLisa ( color = "otro", talle = 40 )
	const remeraBlanca = new RLisa ( color = "blanca", talle = 48)
	const remeraBordadaUno = new RBordada ( color = "gris", cantidadDeColores = 3 , talle = 32 )
	const remeraBordadaDos = new RBordada ( color = "blanca", cantidadDeColores = 4, talle = 45 )
	const remeraSublimadaDisney =  new RSublimada ( ancho = 10, alto = 15, marca = "disney", costoPorDerechos = 100, color = "negra", talle = 34)
	const sucursalFlores = new Sucursal( seDescuentaAPartirDe = 8) 
	const sucursalAvellaneda = new Sucursal( seDescuentaAPartirDe = 5 )
	const pedidoTalle40 = new Pedido (talle = 40, tipo = "lisa", sucursal = sucursalAvellaneda)
	const pedidoTalle45 = new Pedido (talle = 45, tipo = "bordada", sucursal = sucursalFlores)
	

	method agregarSucursalesEnEmpresa() {
		empresa.agregarSucursales(sucursalAvellaneda)
		empresa.agregarSucursales(sucursalFlores)
	}
	
	method agregarRemerasAPedido(){
		pedidoTalle40.agregarRemeras(remeraAzul)
		pedidoTalle40.agregarRemeras(remeraNegra)
	}
	
	method agregarConveniosASucursal(sucursal){
		sucursal.agregarConvenios("disney")
		sucursal.agregarConvenios("nike")
	}
	
	method elementosParaCalcularGastos(){
		sucursalAvellaneda.agregarPedidos(pedidoTalle40)
		pedidoTalle40.agregarRemeras(remeraAzul)
		pedidoTalle40.agregarRemeras(remeraAzul)
		pedidoTalle40.agregarRemeras(remeraAzul)
		pedidoTalle40.agregarRemeras(remeraAzul)
		pedidoTalle40.agregarRemeras(remeraAzul)
		pedidoTalle40.agregarRemeras(remeraAzul)
	}
	
	test "agregar remera de talle 40 en pedidoTalle40"{
		self.agregarRemerasAPedido()
		assert.equals(2, pedidoTalle40.cantidadDeRemeras())
	}
	
	test "costo de remeras"{
		assert.equals(80, remeraAzul.precio())
		assert.equals(100, remeraBlanca.precio())
		assert.equals(88, remeraNegra.precio())
		assert.equals(130, remeraBordadaUno.precio())
		assert.equals(160, remeraBordadaDos.precio())
		assert.equals(255, remeraSublimadaDisney.precio())
	}
	
	test "cantidad de remeras de color azul en pedido"{
		pedidoTalle40.agregarRemeras(remeraAzul)
		pedidoTalle40.agregarRemeras(remeraAzul)
		pedidoTalle40.agregarRemeras(remeraAzul)
		assert.equals(3,pedidoTalle40.cantidadDeRemerasDeColor("azul"))
	}
	
	test "Convenio con nike"{
		sucursalAvellaneda.agregarConvenio("disney")
		assert.that(sucursalAvellaneda.buscarConvenio("disney"))
		
	}
	
	test "costo de pedido es 480 "{
		self.elementosParaCalcularGastos()
		assert.equals(480,pedidoTalle40.costo())
	}
	
	test "total facturado por la sucursal avellaneda"{
		self.elementosParaCalcularGastos()
		assert.equals(480,sucursalAvellaneda.totalFacturado())
	}
	
	test "total facturado por la empresa"{
		self.agregarSucursalesEnEmpresa()
		self.elementosParaCalcularGastos()
		sucursalFlores.agregarPedidos(pedidoTalle45)
		pedidoTalle45.agregarRemeras(remeraBordadaDos)
		assert.equals(160,sucursalFlores.totalFacturado())
		assert.equals(800,empresa.totalFacturadoPorEmpresa())
	}
	
	test "Cantidad de remeras de color azul"{
		self.elementosParaCalcularGastos()
		assert.equals(6,pedidoTalle40.cantidadDeRemerasDeColor("azul"))
	}
	
}
